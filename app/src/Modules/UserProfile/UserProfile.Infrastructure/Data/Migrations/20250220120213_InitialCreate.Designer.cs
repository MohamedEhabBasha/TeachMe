// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserProfile.Infrastructure.Data;

#nullable disable

namespace UserProfile.Infrastructure.Data.Migrations
{
    [DbContext(typeof(UserProfileContext))]
    [Migration("20250220120213_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserProfile.Domain.UserProfiles.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id", "Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("UserProfile.Domain.UserProfiles.UserFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "StudentId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("UserProfile.Domain.UserProfiles.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Introduction")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ComplexProperty<Dictionary<string, object>>("Photo", "UserProfile.Domain.UserProfiles.UserProfile.Photo#Photo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PublicId")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Url")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");
                        });

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("UserProfile.Domain.UserProfiles.Category", b =>
                {
                    b.HasOne("UserProfile.Domain.UserProfiles.UserProfile", null)
                        .WithMany("Categories")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserProfile.Domain.UserProfiles.UserFollow", b =>
                {
                    b.HasOne("UserProfile.Domain.UserProfiles.UserProfile", null)
                        .WithMany("UserFollowers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserProfile.Domain.UserProfiles.UserProfile", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("UserFollowers");
                });
#pragma warning restore 612, 618
        }
    }
}
